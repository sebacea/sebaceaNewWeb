---
title: "Clustering NBA players using dimensionality reduction in R"
description: |
  Comparing PCA vs UMAP vs TSNE to analyze NBA draft data
author:
  - name: Karat Sidhu
    url: {}
date: 2022-09-25
image: images/thumb.jpg
categories:
  - Long-Read
  - TidyModels
  - Dimension Reduction
  - PCA
  - UMAP
  - TSNE
toc: true
toc-title: Table of contents
toc-location: left
draft: true
---


![main](images/draft.jpg)

This is a continuation of my series of learning to use different algorithms in R and learning more about the Tidymodels package, and its various uses. In addition to using the Tidymodels package, I will also try out the RTSNE package for trying out the T-SNE algorithm. 



## About the Data

The data set used comes for Kaggle.com, a great source of finding all kinds of data sets for data visualization and analysis. The data contains various statistics for all the NBA players drafted into the league from 1989 to 2021. It is a fairly tidy data set and requires little to none data clean in most of the cases to use for analysis. 


:::{.callout-note}


Link to the original kaggle.com source can be found [here](https://www.kaggle.com/datasets/mattop/nba-draft-basketball-player-data-19892021) or by copy pasting the following URL:

> https://www.kaggle.com/datasets/mattop/nba-draft-basketball-player-data-19892021
:::



With some additional information:

:::{.callout-tip collapse="true"}

## Data Information (click to expand)


The dataset contains all NBA Draft picks from 1989-2021. Dataset consists of year, overall pick and player data.

Notable players: LeBron James, Kobe Bryant, Derrick Rose, Dirk Nowitzki, Carmelo Anthony, Stephen Curry, Paul Pierce, Kevin Durant, Shaq, Vince Carter, Allen Iverson

Data from: https://www.basketball-reference.com/draft/

:::


![banner](images/banner.jpeg)

## Motivation

As stated earlier, my primary motivation for this blog post is learning how to use various methods of clustering data to find relationship between different players and their careers, and look at how closely those careers might be related, and potentially what influences such relations. 

Each of the alogrithms/methods use work in a slightly different way, primarily unsupervised and it should hopefully show the differences in which all players are related. Furthermore, these differences will also be method dependent and hopefully interesting to a basketball or a NBA fan. 

## Algorithms used

Some of the methods I hope to use in this blog post include:

- PCA
- UMAP
- T-SNE


## Packages Used

For all of the aforementioned algorithms, R-code was used to carry out the analysis. 

Some of the R-packages used for data analysis as well as data modelling include:

- TidyModels - for PCA and UMAP
- TidyVerse - for data wrangling, data tidying
- RTSNE - for T-SNE


## Data Analysis

### Loading and Looking at the data

Data is available in a CSV format, and can be read and looked at using the readR package in R. 

#### Loading Libraries

Adding all the libraries needed for all analysis in a single place. The main libraries used are mentioned in the previous section.

```{r}
library(tidyverse)
library(tidymodels)
library(tidytext)
library(Rtsne)
library(embed)

```

#### Loading the CSV file

The data files were downloaded from the Kaggle repo and saved in the CSV format locally for ease of use. All original data files are also available on the Kaggle repo linked above.


```{r}

nba <- read_csv("/Users/karatatiwantsinghsidhu/Documents/Code/karat_codes/posts/nba-clustering/data/nbaplayersdraft.csv")

nba  |>  as_tibble()

```


### Data Cleaning & Exploratory Analysis

Clean the data in the database and remove the old data. 

Before cleaning the database, lets look in a bit more detail on how each data component is labelled.

```{r}

colnames(nba)


```

Data is in the long format, so we don't need to transform the columns or rows and can use the given dataset as is. Furthermore, we don't need to use the ID column in the data.

```{r}

nba <- nba  |> select(-c(id, college))

```

Remove all empty rows in the data


```{r}
nba <- nba  |> na.omit()

```


The values are now ready to be transformed using each of the three different algorithms. 


## Data Modelling

Set seed

```{r}
set.seed(123)
```


### PCA

Prep  the recipe using the recipe package in TidyModels.
Normalize all the data not used as indentifiers in the algorithm

```{r}
pca_rec <- recipe(~., data = nba) |>  # what data to use
  update_role(player,team, new_role = "id") |> 
  step_normalize(all_predictors()) |> # normalize all other columns
  step_pca(all_predictors()) # pca for all other columns


```


```{r}
pca_prep <- prep(pca_rec)

pca_prep
```

Tidied the data

```{r}
tidied_pca <- tidy(pca_prep, 2)

tidied_pca


```

Plot the Principal Components

```{r}
tidied_pca |> 
  filter(
    component == "PC1" |
      component == "PC2" |
      component == "PC3" |
      component == "PC4"
   ) |> 
  mutate(component = fct_inorder(component)) |> 
    ggplot(aes(value, terms, fill = terms)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~component, nrow = 1) +
  hrbrthemes::theme_ipsum() +
  labs(y = NULL) 
```


PCA Contributions for the first 2 Principal Components.

```{r}
tidied_pca |> 
  filter(component %in% paste0("PC", 1:2)) |> 
  group_by(component) |>
  top_n(8, abs(value)) |>
  ungroup() |>
  mutate(terms = reorder_within(terms, abs(value), component)) |>
  ggplot(aes(abs(value), terms, fill = value > 0)) +
  geom_col() +
  facet_wrap(~component, scales = "free_y") +
  scale_y_reordered() +
  labs(
    x = "Absolute value of contribution",
    y = NULL, fill = "Positive?"
  ) +
  hrbrthemes::theme_ipsum()
```


PCA Biplot:

```{r}
juice(pca_prep) |> 
  ggplot(aes(PC1, PC2, label = player)) +
  geom_point(aes(color = team),alpha = 0.7, size = 2) +
  ggrepel::geom_text_repel(max.overlaps = 40) +
  labs(color = NULL) + hrbrthemes::theme_ipsum()
```



### UMAP

UMAP Prep

Similar to the PCA analysis, UMAP recipe is preped using the recipes package in TidyModels. 

```{r}

umap_rec <- recipe(~., data = nba) |>
  update_role(player, team, new_role = "id") |>
  step_normalize(all_predictors()) |>
  step_umap(all_predictors())

```

```{r}

umap_prep <- prep(umap_rec)

umap_prep

```

Looking at the UMAP biplot

```{r}
juice(umap_prep) |> 
  ggplot(aes(UMAP1, UMAP2, label = player)) +
  geom_point(aes(color = team), alpha = 0.7, size = 2) +
  ggrepel::geom_text_repel(max.overlaps = 75) +
  labs(color = NULL) + hrbrthemes::theme_ipsum()
```


### TSNE

TSNE in R works slightly differently to the previous  two methods. Since the package used is not TidyModels in this case, we use a slightly different approach. 

First, we remove every non numeric value from the data set. These values can, however, be used once the T-SNE has been applied to the data set. 

```{r}

nba_tsne <- nba  |> select(-c(team, player))

```

Carrying out the TSNE.

```{r}

tsne <- Rtsne(nba_tsne, 
perplexity = 30,
eta = 100,
max_iter = 2000)

```

Extract the required data from the results set. Add additional columns corresponding to the non numeric values from the original data. 

```{r}

Y <- as.data.frame(tsne$Y)

teams <- nba$team
players <- nba$player

```

Plot the T-SNE results biplot with the first two components.

```{r}

ggplot(Y, aes(x =V1, y =V2, label = players)) +
geom_point(aes(color = teams)) + labs(x = "tsne-1", y = "tsne-2",color = "team") +
  ggrepel::geom_text_repel(max.overlaps = 60) + hrbrthemes::theme_ipsum()

```


Looking at the shape of the TSNE 1 vs TSNE 2, the data is close to normal distribution. 


## Results and Conclusion

Three different results are available for each of algorithms through which the data is run. Using a smaller data set or knowing even more information like player positions (PF, C, PG etc.) could further help with the results and establishing a pattern of why each of the players are linked together or clustered together.

Some really interesting results emerge when you look into details for each of the corresponding clusters. Look at PCA results,and you see a lot of modern great point guards like Chris Paul, Steve Nash, Jason Kidd and Stephen Curry appear very close to each other in the results. Similarly, great centers are close to each other in the same results, and similar trend is observed for a lot of other positions. However, this blog post was mainly an exercise of the process involved in getting to the results rather than what the results actually mean. 

Nevertheless, it was an interesting exercise for me personally and particularly for trying out TSNE in R for the first time.


## References


